<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// MAKE SURE ONLY 1 INSTANCE OF obj_lfx EXISTS TO AVOID DOUBLE INITIATION //
if(instance_number(object_index) &gt; 1) {
    instance_destroy();
} else {
    // LISTS AND SURFACES //
    globalvar LFX_lights, LFX_directionals, LFX_casters, LFX_diffuse, LFX_normal, LFX_emissive, LFX_specular;
    LFX_diffuse = -1;
    LFX_normal = -1;
    LFX_emissive = -1;
    LFX_specular = -1;
    LFX_lights = ds_list_create();
    LFX_directionals = ds_list_create();
    LFX_casters = ds_list_create();
    // SETTINSG //
    globalvar LFX_debug, LFX_culling, LFX_ambient_light, LFX_render_scale;
    LFX_debug = true;
    LFX_culling = false;
    LFX_ambient_light = c_black;
    LFX_render_scale = 1;
    // SHADER UNIFORMS //
    globalvar LFX_shader, LFX_u_normal_map, LFX_u_emissive_map, LFX_u_specular_map, LFX_u_uvs, LFX_u_angle, LFX_u_normal_uvs, LFX_u_specular_uvs, LFX_u_emissive_uvs, LFX_u_emissive_blend;
    LFX_shader = sha_deferred_hlsl;
    switch(os_type) {
        case os_windows: // Windows OS (NOTE: this replaces the deprecated os_win32 constant) 
        case os_win8native: // Windows 8 
        case os_xboxone: // Microsoft XBox One 
            LFX_shader = sha_deferred_hlsl;
            break;
        case os_linux: // Linux 
        case os_macosx: // Mac OS X 
            LFX_shader = sha_deferred_glsl;
            break;
        case os_winphone: // Windows 8 Phone 
        case os_ios: // iOS (iPhone, iPad, iPod Touch) 
        case os_android: // Android 
        case os_tizen: // Tizen (Native or JS) 
        case os_ps3: // Sony PlayStation 3 
        case os_ps4: // Sony PlayStation 4 
        case os_psvita: // Sony PlayStation Vita 
        case os_unknown: // unknown OS 
            // DON'T KNOW FOR SURE IF HLSL OR GLSL //
            // TURN LFX OFF JUST TO BE SURE //
            visible = 0;
            break;
    }
    LFX_u_normal_map = shader_get_sampler_index(LFX_shader, "u_normal_map");
    LFX_u_emissive_map = shader_get_sampler_index(LFX_shader, "u_emissive_map");
    LFX_u_specular_map = shader_get_sampler_index(LFX_shader, "u_specular_map");
    LFX_u_uvs = shader_get_uniform(LFX_shader, "u_uvs");
    LFX_u_angle = shader_get_uniform(LFX_shader, "u_angle");
    LFX_u_normal_uvs = shader_get_uniform(LFX_shader, "u_normal_uvs");
    LFX_u_specular_uvs = shader_get_uniform(LFX_shader, "u_specular_uvs");
    LFX_u_emissive_uvs = shader_get_uniform(LFX_shader, "u_emissive_uvs");
    LFX_u_emissive_blend = shader_get_uniform(LFX_shader, "u_emissive_blend");
    // LIGHT SURFACE //
    LFX_lightmap = -1;
    // FINAL RENDER //
    LFX_final = -1;
    LFX_final_scale_x = 1;
    LFX_final_scale_y = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// CALCULATE THE SCALE TO FIT THE VIEWS TO THE WHOLE WINDOW/DISPLAY //
var gw = display_get_gui_width();
var gh = display_get_gui_height();
var maxw = 1;
var maxh = 1;
for(var a = 0; a &lt; 8; a += 1) {
    if(view_visible[a]) {
        var vw = view_xport[a] + view_wport[a];
        var vh = view_yport[a] + view_hport[a];
        if(vw &gt; maxw) {
            maxw = vw;
        }
        if(vh &gt; maxh) {
            maxh = vh;
        }
    }
}
LFX_final_scale_x = gw / maxw;
LFX_final_scale_y = gh / maxh;
// PREPARE THE FINAL SURFACE //
if(!surface_exists(LFX_final)) {
    LFX_final = surface_create(gw, gh);
} else {
    if(surface_get_width(LFX_final) != gw || surface_get_height(LFX_final) != gh) {
        surface_resize(LFX_final, gw, gh);
    }
}
surface_set_target(LFX_final);
draw_clear(c_black);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DRAW THE FINAL RESULT //
// NOTE: IF YOU WANT POST PROCESS EFFECTS, APPLY THEM TO THIS SURFACE //
draw_surface(LFX_final, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// RESET THE DEFERRED SHADER //
surface_reset_target();
shader_reset();
// PREPARE TO RENDER THE LIGHT PASS //
surface_set_target(LFX_lightmap);
draw_clear_alpha(LFX_ambient_light, 0);
draw_set_blend_mode_ext(bm_one, bm_one);
// DRAW POINT LIGHTS //
lfx_light_draw_all();
// RESET THE WORLD MATRIX //
d3d_transform_set_identity();
// DRAW DIRECTIONAL LIGHTS //
lfx_light_directional_draw_all();
// RESET TARGET AND BLEND MODE //
draw_set_blend_mode(bm_normal);
surface_reset_target();
// RENDER THE FINAL PASS //
shader_set(sha_deferred_final);
texture_set_stage(shader_get_sampler_index(sha_deferred_final, "u_light"), surface_get_texture(LFX_lightmap));
texture_set_stage(shader_get_sampler_index(sha_deferred_final, "u_emissive"), surface_get_texture(LFX_emissive));
texture_set_stage(shader_get_sampler_index(sha_deferred_final, "u_specular"), surface_get_texture(LFX_specular));
var difftex = surface_get_texture(LFX_diffuse);
shader_set_uniform_f(shader_get_uniform(sha_deferred_final, "u_texel"), texture_get_texel_width(difftex), texture_get_texel_height(difftex));
shader_set_uniform_f(shader_get_uniform(sha_deferred_final, "u_radius"), max(surface_get_width(LFX_diffuse), surface_get_height(LFX_diffuse)) / 50);
surface_set_target(LFX_final);
// POSITION THE VIEW PROPERLY //
draw_surface_ext(LFX_diffuse, view_xport[view_current] * LFX_final_scale_x, view_yport[view_current] * LFX_final_scale_x, LFX_final_scale_x / LFX_render_scale, LFX_final_scale_x / LFX_render_scale, 0, c_white, 1);
shader_reset();
// DEBUG DRAW //
if(LFX_debug) {
    var xo = view_xport[view_current] * LFX_final_scale_x;
    var yo = view_yport[view_current] * LFX_final_scale_y;
    var xs = LFX_final_scale_x * 0.2 / LFX_render_scale;
    var sw = surface_get_width(LFX_diffuse) * xs;
    draw_enable_alphablend(0);
    draw_set_colour_write_enable(1, 1, 1, 0);
    draw_surface_ext(LFX_diffuse, xo, yo, xs, xs, 0, c_white, 1);
    draw_surface_ext(LFX_normal, xo + sw, yo, xs, xs, 0, c_white, 1);
    draw_surface_ext(LFX_emissive, xo + sw * 2, yo, xs, xs, 0, c_white, 1);
    draw_surface_ext(LFX_specular, xo + sw * 3, yo, xs, xs, 0, c_white, 1);
    draw_surface_ext(LFX_lightmap, xo + sw * 4, yo, xs, xs, 0, c_white, 1);
    draw_enable_alphablend(1);
    draw_set_colour_write_enable(1, 1, 1, 1);
}
// FINAL PASS DONE //
surface_reset_target();
d3d_transform_stack_pop();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// MAKE SURE THE BUFFERS FIT THE VIEW //
var vw = view_wport[view_current] * LFX_render_scale;
var vh = view_hport[view_current] * LFX_render_scale;
// DIFFUSE //
if(!surface_exists(LFX_diffuse)) {
    LFX_diffuse = surface_create(vw, vh);
} else {
    if(surface_get_width(LFX_diffuse) != vw || surface_get_height(LFX_diffuse) != vh) {
        surface_resize(LFX_diffuse, vw, vh);
    }
}
surface_set_target(LFX_diffuse);
draw_clear_alpha(background_colour, 1);
surface_reset_target();
// NORMAL //
if(!surface_exists(LFX_normal)) {
    LFX_normal = surface_create(vw, vh);
} else {
    if(surface_get_width(LFX_normal) != vw || surface_get_height(LFX_normal) != vh) {
        surface_resize(LFX_normal, vw, vh);
    }
}
surface_set_target(LFX_normal);
draw_clear_alpha(make_colour_rgb(127, 127, 255), 1);
surface_reset_target();
// SPECULAR //
if(!surface_exists(LFX_specular)) {
    LFX_specular = surface_create(vw, vh);
} else {
    if(surface_get_width(LFX_specular) != vw || surface_get_height(LFX_specular) != vh) {
        surface_resize(LFX_specular, vw, vh);
    }
}
surface_set_target(LFX_specular);
draw_clear_alpha(c_black, 1);
surface_reset_target();
// EMISSIVE //
if(!surface_exists(LFX_emissive)) {
    LFX_emissive = surface_create(vw, vh);
} else {
    if(surface_get_width(LFX_emissive) != vw || surface_get_height(LFX_emissive) != vh) {
        surface_resize(LFX_emissive, vw, vh);
    }
}
surface_set_target(LFX_emissive);
draw_clear_alpha(c_black, 1);
surface_reset_target();
// LIGHTMAP //
if(!surface_exists(LFX_lightmap)) {
    LFX_lightmap = surface_create(vw, vh);
} else {
    if(surface_get_width(LFX_lightmap) != vw || surface_get_height(LFX_lightmap) != vh) {
        surface_resize(LFX_lightmap, vw, vh);
    }
}
// RECREATE THE VIEW MATRIX IN THE WORLD MATRIX //
d3d_transform_stack_push();
d3d_transform_set_translation(-view_xview[view_current], -view_yview[view_current], 0);
d3d_transform_add_scaling(view_wport[view_current] / view_wview[view_current], view_hport[view_current] / view_hview[view_current], 1);
d3d_transform_add_translation(-view_wview[view_current] * 0.5, -view_hview[view_current] * 0.5, 0);
d3d_transform_add_rotation_z(view_angle[view_current]);
d3d_transform_add_translation(view_wport[view_current] * 0.5, view_hport[view_current] * 0.5, 0);
d3d_transform_add_scaling(LFX_render_scale, LFX_render_scale, 1);
// SET THE SHADER //
lfx_shader_set();
// DRAW THE BACKGROUNDS //
for(var a = 0; a &lt; 8; a += 1) {
    if(background_visible[a] &amp;&amp; !background_foreground[a] &amp;&amp; background_exists(background_index[a])) {
        var e = background_get_map(background_index[a], "_emissive");
        lfx_uniform_background(background_index[a], 0, background_get_map(background_index[a], "_normal"), background_get_map(background_index[a], "_specular"), e, c_white * background_exists(e));
        lfx_draw_background_tiled(background_index[a], background_x[a], background_y[a]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
